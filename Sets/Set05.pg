##DESCRIPTION
##  sets and compliments
##ENDDESCRIPTION

##DBsubject(Set theory)
##DBchapter(Basic properties and operations)
##Institution(SUNY Oneonta)
## KEYWORDS('sets','set','set theory',’union’,'intersection')

DOCUMENT();
loadMacros(
  "PGstandard.pl",
  "PGML.pl",
  "MathObjects.pl",
  "parserMultiAnswer.pl",
  "scaffold.pl",
  "PGcourse.pl",
  "PGbasicmacros.pl",
  "PGchoicemacros.pl",
  "PGanswermacros.pl",
  "PGgraphmacros.pl",
  "extraAnswerEvaluators.pl",
  "PGauxiliaryFunctions.pl",
  "parserPopUp.pl",
  "niceTables.pl",
  "pccTables.pl",
  "contextArbitraryString.pl"
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;

%U=(
	"sally"=>1,
	"robert"=>2,
	"juan"=>3,
	"mikaila"=>4,
	"randal"=>5,
	"saul"=>6
);

$univ=(1,2,3,4,5,6);
$ans1=Set(1,3,5);
$ans2=Set($univ-$ans1);

Context("ArbitraryString");

Context()->texStrings;
BEGIN_TEXT
Six students were asked whether they like coffee, tea, or soda. Use the table below to answer the following questions.

\{ begintable(4) \}
\{ row( "Drink", "Coffee", "Tea", "Soda" ) \}
\{ row( "Sally", "Yes", "No", "Yes" ) \}
\{ row( "Robert", "No", "No", "Yes" ) \}
\{ row( "Juan", "Yes", "No", "No" ) \}
\{ row( "Mikaila", "No", "No", "No" ) \}
\{ row( "Randal", "Yes", "Yes", "Yes" ) \}
\{ row( "Saul", "No", "Yes", "No" ) \}
\{ endtable() \}
$PAR
The universe is \(U\) = \{Sally, Robert, Juan, Mikaila, Randall, Saul\}. Let \(C\) be the set of coffee, \(T\) the set of students who like tea, and \(S\)  the set of students who like soda.
$PAR
Note: The complement of a set \(X\) may be denoted by \(\overline{X}\), or \(X^c\).
$PAR
Find the set of students who did like coffee. \{ans_rule(80)\}
$PAR
Find the set of students who did not like coffee. \{ans_rule(76)\}
$PAR
Find \(\overline{C}\).\{ans_rule(106)\}
$PAR
END_TEXT
Context()->normalStrings;

ANS(Compute("The string I want")->cmp(checker => sub{

	my ($correct, $student, $ansHash) = @_;
	
	$student =~ s/ //g;
	
	if ($student !~ /^{/) { 
        Value->Error("A set must start with a curly-brace '{'");
     }
	 
	 if ($student !~ /}$/) { 
        Value->Error("A set must end with a curly-brace '}'");
     }
	 
	 $student = lc $student;
	 
	 foreach $a(keys %U) {
           $student =~ s/$a/$U{$a}/;       
     }

	$student =~ s/{//;
        $student =~ s/}//;

	@sans = split(',', $student);
	
	$stdnt=Set(@sans);
	
	if($stdnt->contains($ans1) and $ans1->contains($stdnt))
	{
		return 1;
	}else{
		Value->Error(("Your solution is missing at least one correct element, or check your commas"));
	}

}));


ANS(Compute("The string I want")->cmp(checker => sub{

	my ($correct, $student, $ansHash) = @_;
	
	$student =~ s/ //g;
	
	if ($student !~ /^{/) { 
        Value->Error("A set must start with a curly-brace '{'");
     }
	 
	 if ($student !~ /}$/) { 
        Value->Error("A set must end with a curly-brace '}'");
     }
	 
	 $student = lc $student;
	 
	 foreach $a(keys %U) {
           $student =~ s/$a/$U{$a}/;       
     }

	$student =~ s/{//;
        $student =~ s/}//;

	@sans = split(',', $student);
	
	$stdnt=Set(@sans);
	
	if($stdnt->contains($ans2) and $ans2->contains($stdnt))
	{
		return 1;
	}else{
		Value->Error(("Your solution is missing at least one correct element, or check your commas"));
	}

}));


ANS(Compute("The string I want")->cmp(checker => sub{

	my ($correct, $student, $ansHash) = @_;
	
	$student =~ s/ //g;
	
	if ($student !~ /^{/) { 
        Value->Error("A set must start with a curly-brace '{'");
     }
	 
	 if ($student !~ /}$/) { 
        Value->Error("A set must end with a curly-brace '}'");
     }
	 
	 $student = lc $student;
	 
	 foreach $a(keys %U) {
           $student =~ s/$a/$U{$a}/;       
     }

	$student =~ s/{//;
        $student =~ s/}//;

	@sans = split(',', $student);
	
	$stdnt=Set(@sans);
	
	if($stdnt->contains($ans2) and $ans2->contains($stdnt))
	{
		return 1;
	}else{
		Value->Error(("Your solution is missing at least one correct element, or check your commas"));
	}

}));

ENDDOCUMENT();